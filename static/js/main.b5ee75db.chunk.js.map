{"version":3,"sources":["images/logo.png","js/components/Menu.js","js/components/GameInfo.js","js/components/MemoryCard.js","js/Util/utility.js","js/components/Loading.js","js/hooks/useAsyncState.js","js/components/Timer.js","js/Models/GameState.js","js/components/Game.js","js/components/LoseScreen.js","js/components/StateManager.js","js/components/Footer.js","js/components/App.js","index.js"],"names":["Menu","props","useState","playAnimation","setPlayAnimation","timePerCard","isChecked","setIsChecked","checkboxAnimation","setCheckboxAnimation","className","animation","alt","src","Logo","onClick","event","resetCurrentScore","document","querySelector","onanimationend","startGame","highScore","type","onChange","toggleHardMode","prevAnimation","checked","GameInfo","MemoryCard","matches","split","name","length","replace","id","Utility","tag","defaultClass","elem","createElement","classNames","addClassesToElement","push","classList","add","animationName","additionalCallback","addEventListener","remove","once","selector","parentNode","parent","childElementCount","firstChild","removeChild","string","toUpperCase","slice","e","parentSelector","currentSelected","getMatchingParent","currentTarget","removeAttribute","setAttribute","Loading","TYPES","console","log","finishedLoading","setFinishedLoading","urls","a","images","map","url","Promise","resolve","reject","img","Image","onload","onerror","Error","all","cards","index","memoryCardOnClick","useEffect","selectedTopics","currentLevelTypes","i","numCardsForLevel","Math","floor","random","includes","getMemCardTypesForCurLvl","topic","fetch","then","resp","json","results","result","image","generateMemoryCard","passBackMemoryCards","currentLevel","numLevels","playerReady","disabled","emailRegex","React","memo","prevProps","nextProps","useAsyncState","value","ref","useRef","forceRender","updateState","newState","Object","is","current","s","Timer","timeleft","timeLeft","setTimeLeft","timerExpired","setTimerExpired","tickerId","setInterval","prevTimeLeft","clearInterval","endGame","playerWon","GAME_STATE","MENU","PLAYING","GAMEOVER_WIN","GAMEOVER_LOSE","Game","setPlayerReady","setCurrentLevel","roundScore","setRoundScore","memoryCards","setMemoryCards","memoryCardsStatus","setMemoryCardsStatus","playerWonRound","setPlayerWonRound","levels","totalTime","setTotalTime","scoreIncAnim","setScoreIncAnim","status","pressed","card","target","selected","parseInt","dataset","key","lost","newMemoryCardsStatus","prevRoundScore","setCurrentScore","prevCurrentScore","endAnimation","playIncrementingAnimation","triggerAnimation","prevMemoryCards","randomIndex","updatedMemoryCards","currentIndex","levelPassed","setGameState","undefined","bind","canvas","confetti","create","resize","useWorker","myConfetti","particleCount","spread","launchConfetti","currentScore","LoseScreen","StateManager","gameCurrentState","setGameCurrentState","setTimePerCard","setHighScore","determineSectionToRender","Footer","class","href","xmlns","width","height","viewBox","d","fill","App","Fragment","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b5ee75db.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.916f1d23.png\";","import React, { useState } from 'react';\r\nimport \"../../css/Menu.css\";\r\n\r\nimport Logo from \"../../images/logo.png\";\r\n\r\n\r\nfunction Menu(props) {\r\n  const [playAnimation, setPlayAnimation] = useState(0);\r\n  const [isChecked, setIsChecked] = useState(props.timePerCard === 3);\r\n  const [checkboxAnimation, setCheckboxAnimation] = useState(0);\r\n  \r\n  function handleCheckboxClick(event) {\r\n    props.toggleHardMode(event);\r\n    setCheckboxAnimation((prevAnimation) => {\r\n      return prevAnimation === 1 ? 0 : 1;\r\n    });\r\n    setIsChecked(true);\r\n  }\r\n\r\n  function handlePlayButtonClick(event) {\r\n    props.resetCurrentScore();\r\n    setPlayAnimation(1);\r\n    document.querySelector('.menu').onanimationend = () => props.startGame(event);\r\n  }\r\n\r\n  return (\r\n    <div className=\"menu\" animation={playAnimation}>\r\n      <img className=\"logo\" alt=\"game logo\" src={Logo}/>\r\n      <h1 className=\"game-title\">Memory Game</h1>\r\n      <button onClick={handlePlayButtonClick} className=\"play-button\">Play!</button>\r\n      <p className=\"hi-score\">High Score: {props.highScore}</p>\r\n      <label className=\"enable-hard\">\r\n        <input type=\"checkbox\" onChange={handleCheckboxClick} checked={isChecked}></input>\r\n        Enable Hard Mode\r\n      </label>\r\n      <p className=\"difficulty-caption\" animation={checkboxAnimation}>You'll get <span className=\"seconds\">{props.timePerCard} seconds</span> per card.</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Menu;","import React from 'react';\r\n\r\n/**\r\n * This component explains how to play the game and lets the user begin playing.\r\n * @param {*} props \r\n * @returns \r\n */\r\nfunction GameInfo() {\r\n  return (\r\n    <div className=\"welcome-dialog\">\r\n      <h1 className=\"hook\">How good is your memory?</h1>\r\n      <p>\r\n        The goal of this game is to select all the shown cards once. Clicking\r\n        on a card more than once will result in game over.\r\n      </p>\r\n      <p>Good luck!</p>\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default GameInfo;","import \"../../css/MemoryCard.css\"\r\n\r\nfunction MemoryCard(props) {\r\n  let matches = props.src.split(\"/\");\r\n  let name = matches[matches.length - 1].split(/[0-9]/)[0];\r\n  name = name.replace(\"-\", \" \");\r\n\r\n  return (\r\n  <figure data-key={props.id} className=\"memory-card\" onClick={props.onClick}>\r\n    <img className=\"memory-card-image\" src={props.src} alt=\"\"/>\r\n    <figcaption className=\"memory-card-label\">{name}</figcaption>\r\n  </figure>\r\n  );\r\n}\r\n\r\nexport default MemoryCard;\r\n","/**\r\n * A class with useful, general-purpose methods.\r\n */\r\nexport default class Utility {\r\n  \r\n  static emailRegex =  \t\r\n  // eslint-disable-next-line no-useless-escape\r\n  /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n\r\n  /**\r\n   * Based on webpack's require to quickly import in all images in a folder.\r\n   * See documentation https://www.npmjs.com/package/require-context to understand\r\n   * more about the parameter.\r\n   * \r\n   * @param r - require.context() function, used for importing all files in\r\n   * a directory matching a pattern. Ex:\r\n   * require.context(\"./images\", false, /\\.(png|jpe?g|svg)$/). Leave blank to use this.\r\n   * @returns - An object containing all the images matching the require context,\r\n   * the original filename (w/ extension) being the key referencing the image.\r\n   */\r\n  // eslint-disable-next-line no-undef\r\n  // static importAllImages(r = require.context(\"../images\", false, /\\.(png|jpe?g|svg)$/)) {\r\n  //   let images = {};\r\n  //   r.keys().map((item) => { images[item.replace('./', '')] = r(item); });\r\n  //   return images;\r\n  // }\r\n\r\n  /**\r\n   * Create an element with various classes. Wraps document.createElement.\r\n   * @param {string} tag - The HTML tag of the element.\r\n   * @param {string} defaultClass - Default class to refer to the element by.\r\n   * @param  {string} classNames - (Optional) Additional classes to give the element.\r\n   * @returns \r\n   */\r\n  static createElement(tag, defaultClass, ...classNames) {\r\n    const elem = document.createElement(tag);\r\n    Utility.addClassesToElement(elem, defaultClass, ...classNames);\r\n\r\n    return elem;\r\n  }\r\n\r\n  /**\r\n   * A helper method which adds classes to a given element.\r\n   * @param {HTMLElement} elem - The element to append classes to.\r\n   * @param {string} defaultClass - The classname that said element should always have.\r\n   * @param {string[]} classNames - The classnames to give the element (optional).\r\n   * */ \r\n  static addClassesToElement(elem, defaultClass, ...classNames) {\r\n      classNames.push(defaultClass);\r\n      elem.classList.add(...classNames);\r\n  }\r\n\r\n  /**\r\n   * For a given element, add an animation but only play it once. Afterwards,\r\n   * unload the animation. This allows you to add the class to it again to \r\n   * play the animation; this is useful when associated with event triggers.\r\n   * @param {HTMLElement} elem - An element to apply the animation to.\r\n   * @param {string} animationName - A CSS class associated with an animation.\r\n   * @param {function} additionalCallback - A callback to execute after the animation is finished playing.\r\n   */\r\n  static triggerAnimation(elem, animationName, additionalCallback=null) {\r\n    elem.classList.add(animationName);\r\n\r\n    elem.addEventListener(\"animationend\", () => {\r\n      elem.classList.remove(animationName);\r\n      if (additionalCallback !== null) {\r\n        additionalCallback();\r\n      }\r\n    }, {once : true}); \r\n  }\r\n\r\n  /**\r\n   * Repeatedly scale the tree of a child node until the parent matching the given\r\n   * selector is found. Returns NULL if no matching parent is found.\r\n   * @param {HTMLElement} elem - A child node.\r\n   * @param {string} selector - CSS Selector String.\r\n   * \r\n   * @returns {HTMLelement} - Parent of elem.\r\n   */\r\n  static getMatchingParent(elem, selector) {\r\n    while(!elem.matches(selector)) {\r\n      elem = elem.parentNode;\r\n      if (elem.matches(\"html\")) {\r\n        return null;\r\n      }\r\n    }\r\n    return elem;\r\n  }\r\n\r\n  /**\r\n   * Get the user's location, using the Geolocation API.\r\n   * @returns {string} The latitude and longitude of the user's location, or null\r\n   * if the user denies permission requests.\r\n   */\r\n  /*\r\n  static getGeolocation() {\r\n\r\n    function success(position) {\r\n      const latitude  = position.coords.latitude;\r\n      const longitude = position.coords.longitude;\r\n\r\n      const latlong = `${latitude},${longitude}`;\r\n\r\n      return Promise.resolve(latlong);\r\n    }\r\n  \r\n    function error() {\r\n      let error = \"User denied location permissions.\";\r\n      return Promise.reject(error)\r\n    }\r\n\r\n    return new Promise(() => {\r\n      navigator.geolocation.getCurrentPosition(success, error);\r\n    });\r\n  }\r\n  */\r\n\r\n  /**\r\n   * Remove all children from a parent node.\r\n   * @param {HTMLElementNode} parent - Parent node containing children.\r\n   */\r\n  static removeAllChildren(parent) {\r\n    if (parent.childElementCount === 0) {\r\n      return;\r\n    }\r\n    while(parent.firstChild) {\r\n      parent.removeChild(parent.firstChild);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sentence format. Makes sure the first letter is capitalized, and then \r\n   * a period is appended.\r\n   * \r\n   * @param {string} string - a string to sentence-case.\r\n   */\r\n  static toSentence(string) {\r\n    return string[0].toUpperCase() + string.slice(1) + \".\";\r\n  }\r\n\r\n  /**\r\n   * A callback function that should be assigned to each button\r\n   * when only one of them should be toggled. Functions like a radio\r\n   * button but with different styling.\r\n   * @param {*} e \r\n   * @param {*} parentSelector \r\n   */\r\n  static toggleSelected(e, parentSelector) {\r\n    // remove selected class from the other.\r\n    const parent = Utility.getMatchingParent(e.currentTarget, parentSelector);\r\n    const currentSelected = parent.querySelector(\".selected\");\r\n    currentSelected.classList.remove(\"selected\");\r\n    currentSelected.removeAttribute(\"disabled\");\r\n    // toggle selected class on the button\r\n    e.currentTarget.classList.add(\"selected\");\r\n    e.currentTarget.setAttribute(\"disabled\", \"true\");\r\n  }\r\n}","import React, { useEffect, useState } from 'react';\r\nimport GameInfo from \"./GameInfo\";\r\n\r\nimport MemoryCard from \"./MemoryCard\";\r\n\r\nimport \"../../css/Loading.css\";\r\nimport Utility from '../Util/utility';\r\n\r\nfunction Loading(props) {\r\n  const TYPES = [\"biryani\", \"burger\", \"butter-chicken\", \"dessert\", \"dosa\",\r\n    \"idly\", \"pasta\", \"pizza\", \"rice\", \"samosa\"];\r\n  console.log(\"= Loading Screen =\")\r\n\r\n  const [finishedLoading, setFinishedLoading] = useState(false);\r\n\r\n  async function generateMemoryCard(urls) {\r\n    let images = urls.map(url => {\r\n      return new Promise((resolve, reject) => {\r\n        let img = new Image();\r\n\r\n        img.onload = () => {\r\n          resolve(img);\r\n        }\r\n\r\n        img.onerror = () => {\r\n          reject(new Error(\"The memory card image could not be fetched.\"));\r\n        }\r\n\r\n        img.src = url;\r\n      });\r\n    });\r\n\r\n    try {\r\n      let cards = await Promise.all(images);\r\n\r\n      return cards.map((img, index) => {\r\n        return (<MemoryCard\r\n          id={index}\r\n          key={img.src}\r\n          src={img.src}\r\n          onClick={props.memoryCardOnClick}\r\n        />);\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n\r\n    // render elements to dom here, with no display initially. so they load.\r\n    // Use onload to send a resolve inside of a promise.\r\n    // then, when this is done,\r\n    // finishedLoading is true in loading.\r\n    // so it needs a promise chain.\r\n  }\r\n\r\n  /**\r\n * Generates a number of topics for use on the memory cards. Ideally,\r\n * we pass these off to the API when we fetch data.\r\n * @returns {string[]} array of valid topics to give to the API to fetch images of.\r\n */\r\n  function getMemCardTypesForCurLvl() {\r\n    let currentLevelTypes = [];\r\n    let i = 0;\r\n\r\n    while (i < props.numCardsForLevel) {\r\n      let index = Math.floor(Math.random() * TYPES.length);\r\n\r\n      if (currentLevelTypes.includes(TYPES[index])) {\r\n        continue;\r\n      } else {\r\n        currentLevelTypes.push(TYPES[index]);\r\n        i++;\r\n      }\r\n    }\r\n\r\n    return currentLevelTypes;\r\n  }\r\n\r\n  // use this useEffect in order to perform network requests after loading.\r\n  useEffect(() => {\r\n    let selectedTopics = getMemCardTypesForCurLvl();\r\n\r\n    Promise.all(selectedTopics.map((topic) => {\r\n      console.log(topic);\r\n      // .json() returns a promise to give data after its done processing.\r\n      return fetch(`https://foodish-api.herokuapp.com/api/images/${topic}/`).then(resp => resp.json())\r\n    })).then((results) => {\r\n      let urls = results.map(result => result.image);\r\n      console.log(urls);\r\n\r\n      generateMemoryCard(urls).then((cards) => {\r\n        props.passBackMemoryCards(cards);\r\n        setFinishedLoading(true);\r\n      });\r\n    })\r\n  }, []);\r\n\r\n  function onContinueClick (event) {\r\n    let dialog = Utility.getMatchingParent(event.target, \"loading\");\r\n    \r\n    Utility.triggerAnimation(dialog, \".fadeout\", () => {\r\n      props.playerReady();\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className=\"loading dialog-menu\">\r\n      {props.currentLevel === 0 &&\r\n        <GameInfo\r\n          numLevels={props.numLevels}\r\n        />\r\n      }\r\n      {finishedLoading ?\r\n        <div>\r\n          <p>Level {props.currentLevel + 1} ready.</p>\r\n          <p className=\"checkmark\">✅</p>\r\n        </div> :\r\n        <div>\r\n          <p> Getting Level {props.currentLevel + 1} ready... </p>\r\n          <p className=\"hourglass rotating\">⌛</p>\r\n        </div>\r\n      }\r\n      <button className=\"continue-button\" onClick={props.playerReady} disabled={!finishedLoading}>Proceed</button>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default React.memo(Loading, (prevProps, nextProps) => {\r\n  if (prevProps.currentLevel !== nextProps.currentLevel) {\r\n    return false;\r\n  } else {\r\n    return true;\r\n  }\r\n}\r\n);","import {useRef, useState} from \"react\";\r\n\r\n/**\r\n * Creates a ref which is used like a state variable. Use this for asynchronous \r\n * methods that use state, since they may have stale closures. (An example of when this\r\n * will happen is if you assign handlers after the initial render through useEffect)\r\n * Refs will ensure the latest rendition of the state. Note that to reference\r\n * the value of the state, because it is a ref, you have to use the `.current`\r\n * property.\r\n * @param {*} value - The initial value.\r\n * @param {*} isProp - Is this state being used as a prop in another component?\r\n * If so, continue to pass the value as you would a normal state variable, but when\r\n * in the child component, call this method referencing the prop and 'true'. This\r\n * will allow the prop to get the most recent value of the state in that component.\r\n * \r\n * @see https://css-tricks.com/dealing-with-stale-props-and-states-in-reacts-functional-components/\r\n * \r\n * @returns \r\n */\r\n function useAsyncState(value, isProp = false) {\r\n  const ref = useRef(value);\r\n  // ref by itself will not force a render, need to use this\r\n  //  in order to force rerenders on changes in value.\r\n  const [, forceRender] = useState(false);\r\n\r\n  function updateState(newState) {\r\n    if (!Object.is(ref.current, newState)) {\r\n      ref.current = newState;\r\n      forceRender(s => !s);\r\n    }\r\n  }\r\n\r\n  return [ref, updateState];\r\n}\r\n\r\nexport default useAsyncState;","import { useEffect, useState, useRef } from \"react\"\r\nimport useAsyncState from \"../hooks/useAsyncState\";\r\n\r\nfunction Timer(props) {\r\n\r\n  let [timeLeft, setTimeLeft] = useState(props.timeleft); \r\n  let [timerExpired, setTimerExpired] = useState(false);\r\n  let tickerId = useRef(null);\r\n\r\n  useEffect(() => {\r\n    tickerId.current = setInterval(() => {\r\n      setTimeLeft(prevTimeLeft => {\r\n        if (prevTimeLeft > 0) {\r\n          console.log(\"timer: \" + (prevTimeLeft - 1));\r\n          return prevTimeLeft - 1;\r\n        } else {\r\n          setTimerExpired(true);\r\n        }\r\n      }) \r\n    }, 1000);\r\n\r\n    return () => {\r\n      console.log(\"ending timer...\");\r\n      clearInterval(tickerId.current); \r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (timerExpired === true) {\r\n      props.endGame();\r\n    }\r\n  }, [timerExpired]);\r\n\r\n  if (props.playerWon.current) {\r\n    console.log(\"ending timer in body...\");\r\n    console.log(props.playerWon.current);\r\n    clearInterval(tickerId.current);\r\n  }\r\n\r\n  return (\r\n    <div className=\"timer\">\r\n      <p className=\"time-left\">{timeLeft}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Timer;","const GAME_STATE = {\r\n  MENU: \"menu\",\r\n  PLAYING: \"playing\",\r\n  GAMEOVER_WIN: \"gameover_win\",\r\n  GAMEOVER_LOSE: \"gameover_lose\"\r\n}\r\n\r\nexport default GAME_STATE;","import React, { useEffect, useState } from 'react';\r\nimport Loading from \"./Loading\";\r\nimport Timer from './Timer';\r\n\r\nimport GAME_STATE from '../Models/GameState';\r\n\r\nimport confetti from 'canvas-confetti';\r\n\r\nimport Utility from '../Util/utility';\r\n\r\nimport useAsyncState from '../hooks/useAsyncState';\r\n\r\n\r\nfunction Game(props) {\r\n  const [playerReady, setPlayerReady] = useState(false);\r\n  const [currentLevel, setCurrentLevel] = useState(0);\r\n  const [roundScore, setRoundScore] = useState(0);\r\n  const [memoryCards, setMemoryCards] = useState([]);\r\n  const [memoryCardsStatus, setMemoryCardsStatus] = useAsyncState([]);\r\n  const [playerWonRound, setPlayerWonRound] = useAsyncState(false);\r\n  const [totalTime, setTotalTime] = useState(props.timePerCard * props.levels[currentLevel]);\r\n  const [scoreIncAnim, setScoreIncAnim] = useState(0);\r\n\r\n  function receiveMemoryCards(cards) {\r\n    setMemoryCards(cards);\r\n\r\n    let status = cards.map((elem, index) => {\r\n      return {\r\n        id: elem.props.id,\r\n        pressed: false\r\n      }\r\n    });\r\n\r\n    setMemoryCardsStatus(status);\r\n  }\r\n\r\n  function handleMemoryCardClick(event) {\r\n    if (playerWonRound.current) {\r\n      return;\r\n    }\r\n    // mark element as selected & update state\r\n    let card = Utility.getMatchingParent(event.target, \".memory-card\");\r\n\r\n    let selected = parseInt(card.dataset.key);\r\n    let lost = false;\r\n    let newMemoryCardsStatus = memoryCardsStatus.current.map((elem, index) => {\r\n      if (elem.id === selected) {\r\n        // if pressed is already true here then we send the game to a game over state.\r\n        if (elem.pressed) {\r\n          lost = true;\r\n        } else {\r\n          elem.pressed = true;\r\n          setRoundScore(prevRoundScore => prevRoundScore + 1);\r\n          props.setCurrentScore(prevCurrentScore => prevCurrentScore + 1);\r\n          playIncrementingAnimation();\r\n        }\r\n\r\n      }\r\n      return elem;\r\n    })\r\n\r\n    if (lost) {\r\n      endGame();\r\n      return;\r\n    }\r\n\r\n    setMemoryCardsStatus(newMemoryCardsStatus);\r\n\r\n    Utility.triggerAnimation(card, \"blow-up\", () => {\r\n      // now reshuffle the elements (from Fisher Yates)\r\n      shuffleCards();\r\n    });\r\n  }\r\n\r\n  function playIncrementingAnimation() {\r\n    setScoreIncAnim(1);\r\n    const endAnimation = () => setScoreIncAnim(0);\r\n    document\r\n      .querySelector(\".point-counter\")\r\n      .addEventListener(\"animationend\", endAnimation);\r\n  }\r\n\r\n  function shuffleCards() {\r\n    setMemoryCards(prevMemoryCards => {\r\n      let updatedMemoryCards = [...prevMemoryCards];\r\n      let currentIndex = prevMemoryCards.length;\r\n      let randomIndex;\r\n\r\n      while (currentIndex !== 0) {\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        console.log(randomIndex);\r\n        currentIndex--;\r\n  \r\n        // destructure\r\n        [updatedMemoryCards[currentIndex], updatedMemoryCards[randomIndex]] =\r\n            [updatedMemoryCards[randomIndex], updatedMemoryCards[currentIndex]];\r\n      }\r\n\r\n      return updatedMemoryCards;\r\n    })\r\n  }\r\n\r\n  function playerIsReady() {\r\n    setPlayerReady(true);\r\n  }\r\n\r\n  function advanceLevel() {\r\n    setTotalTime(props.timePerCard * props.levels[currentLevel + 1]);\r\n    setRoundScore(0);\r\n    setPlayerReady(false);\r\n    setCurrentLevel(currentLevel + 1);\r\n    setPlayerWonRound(false);\r\n    console.log(\"You should advance the level here and go back to loading.\");\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (roundScore >= props.levels[currentLevel]) {\r\n      setPlayerWonRound(true);\r\n    } \r\n  });\r\n\r\n  if (!playerReady) {\r\n    return (\r\n      <Loading\r\n        currentLevel={currentLevel}\r\n        numCardsForLevel={props.levels[currentLevel]}\r\n        playerReady={playerIsReady}\r\n        passBackMemoryCards={receiveMemoryCards}\r\n        memoryCardOnClick={handleMemoryCardClick}\r\n      />\r\n    )\r\n  }\r\n\r\n  let levelPassed = null;\r\n  console.log(roundScore >= props.levels[currentLevel]);\r\n\r\n  if (roundScore >= props.levels[currentLevel]) {\r\n    levelPassed = (\r\n      <div className=\"round-win\">\r\n        <p className=\"round-win-message\">🗹 Level {currentLevel + 1} Passed!</p>\r\n        <button className=\"advance-round-button\" onClick={advanceLevel}>Continue</button>\r\n      </div>\r\n    );\r\n    // if the next level is undefined... that means the player was on the last level.\r\n    if (props.levels[currentLevel + 1] === undefined) {\r\n      levelPassed = (\r\n      <div className=\"match-win round-win\">\r\n        <p className=\"round-win-message\">Congratulations!</p>\r\n        <p className=\"round-win-subtext\">You beat the game. Impeccable memory!</p>\r\n        <button className=\"end-game-button\" onClick={props.setGameState.bind(null, GAME_STATE.MENU)}>Return to Main Menu</button>\r\n      </div>\r\n      )\r\n      launchConfetti();\r\n    }\r\n  }\r\n\r\n  function launchConfetti() {\r\n    let canvas = document.querySelector(\".confetti-canvas\");\r\n    canvas.classList.remove(\"no-display\");\r\n    let myConfetti = confetti.create(canvas, {\r\n      resize: true,\r\n      useWorker: true\r\n    });\r\n\r\n    myConfetti({\r\n      particleCount: 100,\r\n      spread: 160\r\n    });\r\n  }\r\n\r\n  function endGame() {\r\n    props.setGameState(GAME_STATE.GAMEOVER_LOSE);\r\n  }\r\n\r\n  return (\r\n    <div className=\"game-area\">\r\n      <div className=\"hud\">\r\n        <p className=\"current-level\">Lv. <span className=\"level\">{currentLevel + 1}</span></p>\r\n        <Timer timeleft={totalTime} endGame={endGame} playerWon={playerWonRound}/>\r\n        <p className=\"total-score\"><span className=\"point-counter\" animation={scoreIncAnim}>{props.currentScore}</span> pts.</p>\r\n      </div>\r\n      <div className=\"cards\">\r\n        {memoryCards}\r\n      </div>\r\n      {levelPassed}\r\n      <canvas className=\"confetti-canvas no-display\"></canvas>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Game;","import GAME_STATE from \"../Models/GameState\";\r\n\r\n\r\nfunction LoseScreen(props) {\r\n  function onClickPlayAgain() {\r\n    props.resetCurrentScore();\r\n    props.setGameState(GAME_STATE.PLAYING);\r\n  }\r\n  return (\r\n    <div className=\"game-over dialog-menu\">\r\n      <p>Game Over! Better luck next time!</p>\r\n      <p>Your Score: {props.currentScore}</p>\r\n      <button\r\n        className=\"play-again\"\r\n        onClick={onClickPlayAgain}>\r\n        Play Again\r\n      </button>\r\n      <button\r\n        className=\"go-to-menu\"\r\n        onClick={props.setGameState.bind(null, GAME_STATE.MENU)}>\r\n        Return to Main Menu</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LoseScreen;","import React, { useEffect, useState } from 'react';\r\nimport '../../css/Game.css';\r\n\r\nimport Menu from \"./Menu\";\r\nimport Game from './Game';\r\nimport LoseScreen from \"./LoseScreen\";\r\n\r\nimport GAME_STATE from '../Models/GameState';\r\n\r\nfunction StateManager() {\r\n\r\n  const [levels, setLevels] = useState([3, 4, 6, 8, 10]); //useState([3, 4, 6, 8, 10]);\r\n  const [gameCurrentState, setGameCurrentState] = useState(GAME_STATE.MENU);\r\n  const [timePerCard, setTimePerCard] = useState(5);\r\n  const [currentScore, setCurrentScore] = useState(0);\r\n  const [highScore, setHighScore] = useState(0);\r\n  console.log(\"Current state:\" + gameCurrentState);\r\n\r\n  useEffect(() => {\r\n    if (currentScore > highScore) {\r\n      setHighScore(currentScore)\r\n    }\r\n  }, [currentScore]);\r\n\r\n  function toggleHardMode(event) {\r\n    if (event.target.checked) {\r\n      setTimePerCard(3);\r\n    } else {\r\n      setTimePerCard(5);\r\n    }\r\n  }\r\n\r\n  function resetCurrentScore() {\r\n    setCurrentScore(0);\r\n  }\r\n\r\n  function determineSectionToRender() {\r\n    switch(gameCurrentState) {\r\n      case GAME_STATE.MENU:\r\n        return (\r\n          <Menu\r\n            startGame={setGameCurrentState.bind(null, GAME_STATE.PLAYING)}\r\n            toggleHardMode={toggleHardMode}\r\n            timePerCard={timePerCard}\r\n            highScore={highScore}\r\n            resetCurrentScore={resetCurrentScore}\r\n            />\r\n        );\r\n      case GAME_STATE.PLAYING:\r\n        return (\r\n          <Game\r\n            levels = {levels}\r\n            setGameState={setGameCurrentState}\r\n            timePerCard = {timePerCard}\r\n            currentScore={currentScore}\r\n            setCurrentScore={setCurrentScore}\r\n          />\r\n        );\r\n      case GAME_STATE.GAMEOVER_LOSE:\r\n        return (\r\n          <LoseScreen\r\n            setGameState={setGameCurrentState}\r\n            currentScore={currentScore}\r\n            resetCurrentScore={resetCurrentScore}\r\n          />\r\n        );\r\n      default: \r\n        break;\r\n    }\r\n  }\r\n  \r\n\r\n  return (\r\n    <>\r\n    {determineSectionToRender()}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default StateManager;","import React from 'react';\r\nimport '../../css/Footer.css';\r\n\r\n\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer class=\"footer\">\r\n      <a className=\"gh-link\" \r\n        href=\"https://github.com/Datrinon/memorycards\">\r\n        <span className=\"text\">View Source on Github.</span>\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z\"\r\n        fill=\"white\"/></svg>\r\n      </a>\r\n    </footer>\r\n  )\r\n}\r\n\r\nexport default Footer;","import '../../css/App.css';\r\n\r\nimport StateManager from './StateManager';\r\nimport Footer from './Footer';\r\n\r\nimport React from 'react';\r\n\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <React.Fragment>\r\n      <main className=\"App content\">\r\n        <StateManager />\r\n      </main>\r\n      <Footer />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './js/components/App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}